/*
 * NewJPanel.java
 *
 * Created on 6. MÃ¤rz 2009, 13:27
 */
package de.cismet.belis.gui.search;

import de.cismet.belis.broker.BelisBroker;
import de.cismet.belis.todo.RetrieveWorker;
import de.cismet.belis.util.BelisIcons;
import de.cismet.belisEE.util.EntityComparator;
import de.cismet.belisEE.util.LeuchteComparator;
import de.cismet.cismap.commons.wfsforms.WFSFormFeature;
import de.cismet.commons.architecture.util.ArchitectureUtils;
import java.util.TreeSet;
import org.apache.commons.collections.comparators.ReverseComparator;
//ToDo visualisation of working Progressbar --> cooler if there were something central for such events
/**
 *
 * @author  spuhl
 */
public class MapSearchControl extends javax.swing.JPanel implements SearchControl {

    private final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(MapSearchControl.class);
    private BelisBroker broker;

    /** Creates new form NewJPanel */
    public MapSearchControl(final BelisBroker broker) {
        this.broker = broker;
        initComponents();
        cmdOk.setIcon(BelisIcons.icoSearch22);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        cmdOk = new javax.swing.JButton();
        panEmpty = new javax.swing.JPanel();

        setMinimumSize(new java.awt.Dimension(100, 25));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(100, 100));
        setLayout(new java.awt.GridBagLayout());

        cmdOk.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        cmdOk.setMnemonic('P');
        cmdOk.setText("Karteninhalt");
        cmdOk.setBorder(null);
        cmdOk.setBorderPainted(false);
        cmdOk.setFocusable(false);
        cmdOk.setMaximumSize(new java.awt.Dimension(150, 23));
        cmdOk.setMinimumSize(new java.awt.Dimension(150, 23));
        cmdOk.setPreferredSize(new java.awt.Dimension(150, 23));
        cmdOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        add(cmdOk, gridBagConstraints);

        panEmpty.setMinimumSize(new java.awt.Dimension(1, 19));
        panEmpty.setOpaque(false);
        panEmpty.setPreferredSize(new java.awt.Dimension(1, 19));

        javax.swing.GroupLayout panEmptyLayout = new javax.swing.GroupLayout(panEmpty);
        panEmpty.setLayout(panEmptyLayout);
        panEmptyLayout.setHorizontalGroup(
            panEmptyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panEmptyLayout.setVerticalGroup(
            panEmptyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 99.0;
        gridBagConstraints.weighty = 1.0;
        add(panEmpty, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    public void startMapSearch(){
        cmdOk.doClick();
    }

private void cmdOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOkActionPerformed
    log.debug("Search with boundingBox");    
    broker.fireSearchStarted();
    broker.setCurrentSearchResults(new TreeSet(new ReverseComparator(new EntityComparator(new ReverseComparator(new LeuchteComparator())))));
    broker.setLastSearch(new RetrieveWorker(broker,broker.getMappingComponent().getCurrentBoundingBox()));
    broker.execute(new RetrieveWorker(broker,broker.getMappingComponent().getCurrentBoundingBox()));
//boolean history = true;
//        MappingComponent mc=getMappingComponent();
//        if (mc==null) {
//            mc=CismapBroker.getInstance().getMappingComponent();
//        }
//        boolean scaling=!(mc.isFixedMapScale())&&!(chkLockScale.isSelected());
//        BoundingBox bb=null;
//        int animation=mc.getAnimationDuration();
//        if (nr!=null) {
//           if (scaling) {
//                bb=new BoundingBox(nr.getJTSGeometry());
//            }
//            else {
//                bb=new BoundingBox(nr.getPosition().buffer(AbstractWFSForm.FEATURE_BORDER));
//            } 
//        }
//        else if (strasse!=null) {
//            if (scaling) {
//                bb=new BoundingBox log.debug("requestRefresh(+" + component + "," + value + ")");
//        if (lastFeature == null || !(value.getIdentifier().equals(lastFeature.getIdentifier()))) {
//            lastFeature = value;public String getBrokerName() {
//        return brokerName;
//    }
//            WFSFormQuery q = queriesByComponentName.get(component);
//            if (q != null) {
//                HashMap<String, String> hm = new HashMap<String, String>();
//                hm.put(q.getQueryPlaceholder(), value.getIdentifier());
//                requestRefresh(component, hm);
//            }
//        }(strasse.getJTSGeometry());
//            }
//            else {
//                bb=new BoundingBox(strasse.getPosition().buffer(AbstractWFSForm.FEATURE_BORDER));
//            }
//        }
//        else {
//            return;
//        }
//        mc.gotoBoundingBox(bb,history,scaling,animation);    
//        chkVisualizeActionPerformed(null);
}//GEN-LAST:event_cmdOkActionPerformed

    public void requestRefresh(String component, WFSFormFeature value) {
//        log.debug("requestRefresh(+" + component + "," + value + ")");
//        if (lastFeature == null || !(value.getIdentifier().equals(lastFeature.getIdentifier()))) {
//            lastFeature = value;
//            WFSFormQuery q = queriesByComponentName.get(component);
//            if (q != null) {
//                HashMap<String, String> hm = new HashMap<String, String>();
//                hm.put(q.getQueryPlaceholder(), value.getIdentifier());
//                requestRefresh(component, hm);
//            }
//        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton cmdOk;
    protected javax.swing.JPanel panEmpty;
    // End of variables declaration//GEN-END:variables

//    public class EJBComBoxModel extends AbstractListModel implements ComboBoxModel {
//
//        private final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(EJBComBoxModel.class);
//        private final ArrayList entities = new ArrayList();
//        private Object selectedItem = null;
//        private Class modelType;
//
//        public Object getElementAt(int index) {
//            return entities.get(index);
//        }
//
//        public EJBComBoxModel(Class modelType) {
//            this.modelType = modelType;
//            RetrieveWorker retrieveWorker = new RetrieveWorker();
//            BrokerLookup.getInstance().getBrokerForName(brokerName).execute(retrieveWorker);
//        }
//
//        class RetrieveWorker extends SwingWorker<Set, Void> {
//
//            RetrieveWorker() {
//            }
//
//            protected Set doInBackground() throws Exception {
//                //return ((BelisBroker)BrokerLookup.getInstance().getBrokerForName(brokerName)).search();
//                //ToDo make proper
//                //return EJBroker.getInstance().getObjectsByBoundingBox("LINESTRING("+((BelisBroker)BrokerLookup.getInstance().getBrokerForName(brokerName)).getMappingComponent().getCurrentBoundingBox()+")");
//                return  broker.search(broker.getMappingComponent().getCurrentBoundingBox());
//            }
//
//            protected void done() {
//                broker.fireSearchFinished();
//                if (isCancelled()) {
//                    log.warn("retrieveWorker is canceled --> nothing to do in method done()");
//                    return;
//                }
//                try {
//                    log.debug("Ergebniss: "+get());
//                } catch (Exception ex) {
//                    log.error("Failure during processing RetrieveWorker results", ex);
//                    return;
//                }
//            }
//        }
        
        public void searchFinished() {
        setSearchEnabled(true);
    }

    public void searchStarted() {
        setSearchEnabled(false);
    }
    
    public void setSearchEnabled(boolean isSearchEnabled) {
        ArchitectureUtils.enableContainerRecursivley(this, isSearchEnabled);  
    }
    
    
//
//        public int getSize() {
//            return entities.size();
//        }
//
//        public Object getSelectedItem() {
//            return selectedItem;
//        }
//
//        public void setSelectedItem(Object anItem) {
//            selectedItem = anItem;
//        }
//    }
//
//    public class EJBRenderer extends DefaultListCellRenderer {
//
//        /** Creates a new instance of ReBeCboRenderer */
//        public EJBRenderer() {
//            super();
//            setHorizontalAlignment(SwingConstants.CENTER);
//        }
//
//        @Override
//        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
//            Component tmpComp = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
//            if (value != null && value instanceof Strassenschluessel) {
//                setText(((Strassenschluessel) value).getStrasse());
//            } else if (value != null && value instanceof Kennziffer) {
//                setText(((Kennziffer) value).getBeschreibung());
//            } else if (value != null) {
//                setText(value.toString());
//            } else {
//                setText("");
//            }
//            setHorizontalAlignment(SwingConstants.LEFT);
//            return tmpComp;
//        }
//    }
}
